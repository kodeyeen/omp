// This code is generated by codegen command. Do not edit.
// As we cannot directly call a C function pointer from Go code
// we need to create C wrapper functions around ompcapi pointers
// which will be used by Go code.

#ifndef CWRAPPERS_H
#define CWRAPPERS_H

#include <stdbool.h>
#include "capi/include/ompcapi.h"

// Actor functions

void* Actor_Create(int model, float x, float y, float z, float rot, int* id);
bool Actor_Destroy(void* actor);
void* Actor_FromID(int actorid);
int Actor_GetID(void* actor);
bool Actor_IsStreamedInFor(void* actor, void* player);
bool Actor_SetVirtualWorld(void* actor, int vw);
int Actor_GetVirtualWorld(void* actor);
bool Actor_ApplyAnimation(void* actor, const char* name, const char* library, float delta, bool loop, bool lockX, bool lockY, bool freeze, int time);
bool Actor_ClearAnimations(void* actor);
bool Actor_SetPos(void* actor, float x, float y, float z);
bool Actor_GetPos(void* actor, float* x, float* y, float* z);
bool Actor_SetFacingAngle(void* actor, float angle);
float Actor_GetFacingAngle(void* actor);
bool Actor_SetHealth(void* actor, float hp);
float Actor_GetHealth(void* actor);
bool Actor_SetInvulnerable(void* actor, bool toggle);
bool Actor_IsInvulnerable(void* actor);
bool Actor_IsValid(void* actor);
bool Actor_SetSkin(void* actor, int skin);
int Actor_GetSkin(void* actor);
bool Actor_GetAnimation(void* actor, CAPIStringView* library, CAPIStringView* name, float* delta, bool* loop, bool* lockX, bool* lockY, bool* freeze, int* time);
bool Actor_GetSpawnInfo(void* actor, float* x, float* y, float* z, float* angle, int* skin);


// Checkpoint functions

bool Checkpoint_Set(void* player, float x, float y, float z, float radius);
bool Checkpoint_Disable(void* player);
bool Checkpoint_IsPlayerIn(void* player);
bool Checkpoint_IsActive(void* player);
bool Checkpoint_Get(void* player, float* x, float* y, float* z, float* radius);


// RaceCheckpoint functions

bool RaceCheckpoint_Set(void* player, int type, float x, float y, float z, float nextX, float nextY, float nextZ, float radius);
bool RaceCheckpoint_Disable(void* player);
bool RaceCheckpoint_IsPlayerIn(void* player);
bool RaceCheckpoint_IsActive(void* player);
bool RaceCheckpoint_Get(void* player, float* x, float* y, float* z, float* nextX, float* nextY, float* nextZ, float* radius);


// Class functions

void* Class_Add(uint8_t team, int skin, float x, float y, float z, float angle, uint8_t weapon1, uint32_t ammo1, uint8_t weapon2, uint32_t ammo2, uint8_t weapon3, uint32_t ammo3, int* id);
void* Class_FromID(int classid);
int Class_GetID(void* cls);
int Class_Count();
bool Class_GetData(void* classptr, uint8_t* teamid, int* skin, float* x, float* y, float* z, float* angle, uint8_t* weapon1, uint32_t* weapon1_ammo, uint8_t* weapon2, uint32_t* weapon2_ammo, uint8_t* weapon3, uint32_t* weapon3_ammo);
bool Class_Edit(void* classptr, uint8_t teamid, int skin, float x, float y, float z, float angle, uint8_t weapon1, uint32_t ammo1, uint8_t weapon2, uint32_t ammo2, uint8_t weapon3, uint32_t ammo3);


// Player functions

bool Player_SetSpawnInfo(void* player, uint8_t team, int skin, float x, float y, float z, float angle, uint8_t weapon1, uint32_t ammo1, uint8_t weapon2, uint32_t ammo2, uint8_t weapon3, uint32_t ammo3);
bool Player_GetSpawnInfo(void* player, uint8_t* team, int* skin, float* x, float* y, float* z, float* angle, uint8_t* weapon1, uint32_t* ammo1, uint8_t* weapon2, uint32_t* ammo2, uint8_t* weapon3, uint32_t* ammo3);
int Player_GetNetworkStats(void* player, CAPIStringView* output);
int Player_NetStatsBytesReceived(void* player);
int Player_NetStatsBytesSent(void* player);
int Player_NetStatsConnectionStatus(void* player);
int Player_NetStatsGetConnectedTime(void* player);
bool Player_NetStatsGetIpPort(void* player, CAPIStringView* output);
int Player_NetStatsMessagesReceived(void* player);
int Player_NetStatsMessagesRecvPerSecond(void* player);
int Player_NetStatsMessagesSent(void* player);
float Player_NetStatsPacketLossPercent(void* player);
int Player_GetCustomSkin(void* player);
int Player_GetDialog(void* player);
bool Player_GetDialogData(void* player, int* dialogid, int* style, CAPIStringView* title, CAPIStringView* body, CAPIStringView* button1, CAPIStringView* button2);
void* Player_GetMenu(void* player);
void* Player_GetSurfingPlayerObject(void* player);
void* Player_GetCameraTargetPlayerObject(void* player);
void* Player_FromID(int playerid);
int Player_GetID(void* player);
bool Player_SendClientMessage(void* player, uint32_t color, const char* text);
bool Player_SetCameraPos(void* player, float x, float y, float z);
bool Player_SetDrunkLevel(void* player, int level);
bool Player_SetInterior(void* player, int interior);
bool Player_SetWantedLevel(void* player, int level);
bool Player_SetWeather(void* player, int weather);
int Player_GetWeather(void* player);
bool Player_SetSkin(void* player, int skin);
bool Player_SetShopName(void* player, const char* name);
bool Player_GiveMoney(void* player, int amount);
bool Player_SetCameraLookAt(void* player, float x, float y, float z, int cutType);
bool Player_SetCameraBehind(void* player);
bool Player_CreateExplosion(void* player, float x, float y, float z, int type, float radius);
bool Player_PlayAudioStream(void* player, const char* url, float x, float y, float z, float distance, bool usePos);
bool Player_StopAudioStream(void* player);
bool Player_ToggleWidescreen(void* player, bool enable);
bool Player_IsWidescreenToggled(void* player);
bool Player_SetHealth(void* player, float health);
float Player_GetHealth(void* player);
bool Player_SetArmor(void* player, float armor);
float Player_GetArmor(void* player);
bool Player_SetTeam(void* player, int team);
int Player_GetTeam(void* player);
bool Player_SetScore(void* player, int score);
int Player_GetScore(void* player);
int Player_GetSkin(void* player);
bool Player_SetColor(void* player, uint32_t color);
uint32_t Player_GetColor(void* player);
uint32_t Player_GetDefaultColor(void* player);
int Player_GetDrunkLevel(void* player);
bool Player_GiveWeapon(void* player, int weapon, int ammo);
bool Player_RemoveWeapon(void* player, int weapon);
int Player_GetMoney(void* player);
bool Player_ResetMoney(void* player);
int Player_SetName(void* player, const char* name);
int Player_GetName(void* player, CAPIStringView* name);
int Player_GetState(void* player);
int Player_GetPing(void* player);
int Player_GetWeapon(void* player);
bool Player_SetTime(void* player, int hour, int minute);
bool Player_GetTime(void* player, int* hour, int* minute);
bool Player_ToggleClock(void* player, bool enable);
bool Player_HasClock(void* player);
bool Player_ForceClassSelection(void* player);
int Player_GetWantedLevel(void* player);
bool Player_SetFightingStyle(void* player, int style);
int Player_GetFightingStyle(void* player);
bool Player_SetVelocity(void* player, float x, float y, float z);
bool Player_GetVelocity(void* player, float* x, float* y, float* z);
bool Player_GetCameraPos(void* player, float* x, float* y, float* z);
float Player_GetDistanceFromPoint(void* player, float x, float y, float z);
int Player_GetInterior(void* player);
bool Player_SetPos(void* player, float x, float y, float z);
bool Player_GetPos(void* player, float* x, float* y, float* z);
int Player_GetVirtualWorld(void* player);
bool Player_IsNPC(void* player);
bool Player_IsStreamedIn(void* player, void* other);
bool Player_PlayGameSound(void* player, int sound, float x, float y, float z);
bool Player_SpectatePlayer(void* player, void* target, int mode);
bool Player_SpectateVehicle(void* player, void* target, int mode);
bool Player_SetVirtualWorld(void* player, int vw);
bool Player_SetWorldBounds(void* player, float xMax, float xMin, float yMax, float yMin);
bool Player_ClearWorldBounds(void* player);
bool Player_GetWorldBounds(void* player, float* xmax, float* xmin, float* ymax, float* ymin);
bool Player_ClearAnimations(void* player, int syncType);
bool Player_GetLastShotVectors(void* player, float* origin_x, float* origin_y, float* origin_z, float* hit_x, float* hit_y, float* hit_z);
void* Player_GetCameraTargetPlayer(void* player);
void* Player_GetCameraTargetActor(void* player);
void* Player_GetCameraTargetObject(void* player);
void* Player_GetCameraTargetVehicle(void* player);
bool Player_PutInVehicle(void* player, void* vehicle, int seat);
bool Player_RemoveBuilding(void* player, int model, float x, float y, float z, float radius);
int Player_GetBuildingsRemoved(void* player);
bool Player_RemoveFromVehicle(void* player, bool force);
bool Player_RemoveMapIcon(void* player, int icon);
bool Player_SetMapIcon(void* player, int iconID, float x, float y, float z, int type, uint32_t color, int style);
bool Player_ResetWeapons(void* player);
bool Player_SetAmmo(void* player, uint8_t id, uint32_t ammo);
bool Player_SetArmedWeapon(void* player, uint8_t weapon);
bool Player_SetChatBubble(void* player, const char* text, uint32_t color, float drawdistance, int expiretime);
bool Player_SetPosFindZ(void* player, float x, float y, float z);
bool Player_SetSkillLevel(void* player, uint8_t weapon, int level);
bool Player_SetSpecialAction(void* player, uint32_t action);
bool Player_ShowNameTagForPlayer(void* player, void* other, bool enable);
bool Player_ToggleControllable(void* player, bool enable);
bool Player_ToggleSpectating(void* player, bool enable);
bool Player_ApplyAnimation(void* player, const char* animlib, const char* animname, float delta, bool loop, bool lockX, bool lockY, bool freeze, uint32_t time, int sync);
bool Player_GetAnimationName(int index, CAPIStringView* lib, CAPIStringView* name);
bool Player_EditAttachedObject(void* player, int index);
bool Player_EnableCameraTarget(void* player, bool enable);
bool Player_EnableStuntBonus(void* player, bool enable);
int Player_GetPlayerAmmo(void* player);
int Player_GetAnimationIndex(void* player);
float Player_GetFacingAngle(void* player);
int Player_GetIp(void* player, CAPIStringView* ip);
int Player_GetSpecialAction(void* player);
int Player_GetVehicleID(void* player);
int Player_GetVehicleSeat(void* player);
bool Player_GetWeaponData(void* player, int slot, int* weaponid, int* ammo);
int Player_GetWeaponState(void* player);
bool Player_InterpolateCameraPos(void* player, float from_x, float from_y, float from_z, float to_x, float to_y, float to_z, int time, int cut);
bool Player_InterpolateCameraLookAt(void* player, float from_x, float from_y, float from_z, float to_x, float to_y, float to_z, int time, int cut);
bool Player_IsPlayerAttachedObjectSlotUsed(void* player, int index);
bool Player_AttachCameraToObject(void* player, void* object);
bool Player_AttachCameraToPlayerObject(void* player, void* object);
float Player_GetCameraAspectRatio(void* player);
bool Player_GetCameraFrontVector(void* player, float* x, float* y, float* z);
int Player_GetCameraMode(void* player);
bool Player_GetKeys(void* player, int* keys, int* updown, int* leftright);
void* Player_GetSurfingVehicle(void* player);
void* Player_GetSurfingObject(void* player);
void* Player_GetTargetPlayer(void* player);
void* Player_GetTargetActor(void* player);
bool Player_IsInVehicle(void* player, void* targetVehicle);
bool Player_IsInAnyVehicle(void* player);
bool Player_IsInRangeOfPoint(void* player, float range, float x, float y, float z);
bool Player_PlayCrimeReport(void* player, void* suspect, int crime);
bool Player_RemoveAttachedObject(void* player, int index);
bool Player_SetAttachedObject(void* player, int index, int modelid, int bone, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ, float scaleX, float scaleY, float scaleZ, uint32_t materialcolor1, uint32_t materialcolor2);
bool Player_GetAttachedObject(void* player, int index, int* modelid, int* bone, float* offsetX, float* offsetY, float* offsetZ, float* rotationX, float* rotationY, float* rotationZ, float* scaleX, float* scaleY, float* scaleZ, int* materialcolor1, int* materialcolor2);
bool Player_SetFacingAngle(void* player, float angle);
bool Player_SetMarkerForPlayer(void* player, void* other, uint32_t color);
uint32_t Player_GetMarkerForPlayer(void* player, void* other);
bool Player_AllowTeleport(void* player, bool allow);
bool Player_IsTeleportAllowed(void* player);
bool Player_DisableRemoteVehicleCollisions(void* player, bool disable);
float Player_GetCameraZoom(void* player);
bool Player_SelectTextDraw(void* player, uint32_t hoverColour);
bool Player_CancelSelectTextDraw(void* player);
bool Player_SendClientCheck(void* player, int actionType, int address, int offset, int count);
bool Player_Spawn(void* player);
bool Player_GPCI(void* player, CAPIStringView* gpci);
bool Player_IsAdmin(void* player);
bool Player_Kick(void* player);
bool Player_ShowGameText(void* player, const char* text, int time, int style);
bool Player_HideGameText(void* player, int style);
bool Player_HasGameText(void* player, int style);
bool Player_GetGameText(void* player, int style, CAPIStringView* message, int* time, int* remaining);
bool Player_Ban(void* player);
bool Player_BanEx(void* player, const char* reason);
bool Player_SendDeathMessage(void* player, void* killer, void* killee, int weapon);
bool Player_SendMessageToPlayer(void* player, void* sender, const char* message);
int Player_GetVersion(void* player, CAPIStringView* version);
int Player_GetSkillLevel(void* player, int skill);
float Player_GetZAim(void* player);
bool Player_GetSurfingOffsets(void* player, float* offsetX, float* offsetY, float* offsetZ);
bool Player_GetRotationQuat(void* player, float* x, float* y, float* z, float* w);
int Player_GetPlayerSpectateID(void* player);
int Player_GetSpectateType(void* player);
uint32_t Player_GetRawIp(void* player);
bool Player_SetGravity(void* player, float gravity);
float Player_GetGravity(void* player);
bool Player_SetAdmin(void* player, bool set);
bool Player_IsSpawned(void* player);
bool Player_IsControllable(void* player);
bool Player_IsCameraTargetEnabled(void* player);
bool Player_ToggleGhostMode(void* player, bool toggle);
bool Player_GetGhostMode(void* player);
bool Player_AllowWeapons(void* player, bool allow);
bool Player_AreWeaponsAllowed(void* player);
bool Player_IsPlayerUsingOfficialClient(void* player);
int Player_GetAnimationFlags(void* player);
bool Player_IsInDriveByMode(void* player);
bool Player_IsCuffed(void* player);
bool Player_IsInModShop(void* player);
int Player_GetSirenState(void* player);
int Player_GetLandingGearState(void* player);
uint32_t Player_GetHydraReactorAngle(void* player);
float Player_GetTrainSpeed(void* player);


// Config functions

bool Config_GetAsBool(const char* cvar);
int Config_GetAsInt(const char* cvar);
float Config_GetAsFloat(const char* cvar);
int Config_GetAsString(const char* cvar, CAPIStringView* output);


// Core functions

uint32_t Core_TickCount();
int Core_MaxPlayers();
bool Core_Log(const char* text);
bool Core_IsAdminTeleportAllowed();
bool Core_AllowAdminTeleport(bool allow);
bool Core_AreAllAnimationsEnabled();
bool Core_EnableAllAnimations(bool allow);
bool Core_IsAnimationLibraryValid(const char* name);
bool Core_AreInteriorWeaponsAllowed();
bool Core_AllowInteriorWeapons(bool allow);
bool Core_BlockIpAddress(const char* ipAddress, int timeMS);
bool Core_UnBlockIpAddress(const char* ipAddress);
bool Core_DisableEntryExitMarkers();
bool Core_DisableNameTagsLOS();
bool Core_EnableZoneNames(bool enable);
bool Core_ShowGameTextForAll(const char* msg, int time, int style);
bool Core_HideGameTextForAll(int style);
int Core_NetworkStats(CAPIStringView* output);
int Core_ServerTickRate();
bool Core_GetWeaponName(int weaponid, CAPIStringView* output);
bool Core_SetChatRadius(float globalChatRadius);
bool Core_SetMarkerRadius(float playerMarkerRadius);
bool Core_SendRconCommand(const char* command);
bool Core_SetDeathDropAmount(int amount);
bool Core_GameMode_SetText(const char* string);
bool Core_SetGravity(float gravity);
float Core_GetGravity();
bool Core_SetNameTagsDrawDistance(float distance);
bool Core_SetWeather(int weatherid);
bool Core_SetWorldTime(int hour);
bool Core_ShowNameTags(bool show);
bool Core_ShowPlayerMarkers(int mode);
bool Core_UsePedAnims();
int Core_GetWeather();
int Core_GetWorldTime();
bool Core_ToggleChatTextReplacement(bool enable);
bool Core_IsChatTextReplacementToggled();
bool Core_IsNickNameValid(const char* name);
bool Core_AllowNickNameCharacter(int character, bool allow);
bool Core_IsNickNameCharacterAllowed(int character);
bool Core_ClearBanList();
bool Core_IsIpAddressBanned(const char* ip);
int Core_GetWeaponSlot(uint8_t weapon);
bool Core_AddRule(const char* name, const char* value);
bool Core_IsValidRule(const char* name);
bool Core_RemoveRule(const char* name);


// NPC functions

bool NPC_Connect(const char* name, const char* script);


// Dialog functions

bool Dialog_Show(void* player, int dialog, int style, const char* title, const char* body, const char* button1, const char* button2);
bool Dialog_Hide(void* player);


// Event functions

bool Event_AddHandler(const char* name, int priority, void* callback);
bool Event_RemoveHandler(const char* name, int priority, void* callback);
bool Event_RemoveAllHandlers(const char* name, int priority);


// GangZone functions

void* GangZone_Create(float minx, float miny, float maxx, float maxy, int* id);
bool GangZone_Destroy(void* gangzone);
void* GangZone_FromID(int gangzoneid);
int GangZone_GetID(void* gangzone);
bool GangZone_ShowForPlayer(void* player, void* gangzone, uint32_t color);
bool GangZone_ShowForAll(void* gangzone, uint32_t color);
bool GangZone_HideForPlayer(void* player, void* gangzone);
bool GangZone_HideForAll(void* gangzone);
bool GangZone_FlashForPlayer(void* player, void* gangzone, uint32_t color);
bool GangZone_FlashForAll(void* gangzone, uint32_t color);
bool GangZone_StopFlashForPlayer(void* player, void* gangzone);
bool GangZone_StopFlashForAll(void* gangzone);
bool GangZone_IsValid(void* gangzone);
bool GangZone_IsPlayerIn(void* player, void* gangzone);
bool GangZone_IsVisibleForPlayer(void* player, void* gangzone);
int GangZone_GetColorForPlayer(void* player, void* gangzone);
int GangZone_GetFlashColorForPlayer(void* player, void* gangzone);
bool GangZone_IsFlashingForPlayer(void* player, void* gangzone);
bool GangZone_GetPos(void* gangzone, float* minx, float* miny, float* maxx, float* maxy);
bool GangZone_UseCheck(void* gangzone, bool enable);


// Menu functions

void* Menu_Create(const char* title, uint32_t columns, float x, float y, float column1Width, float column2Width, int* id);
bool Menu_Destroy(void* menu);
void* Menu_FromID(int menuid);
int Menu_GetID(void* menu);
int Menu_AddItem(void* menu, uint8_t column, const char* text);
bool Menu_SetColumnHeader(void* menu, uint8_t column, const char* headerTitle);
bool Menu_ShowForPlayer(void* menu, void* player);
bool Menu_HideForPlayer(void* menu, void* player);
bool Menu_Disable(void* menu);
bool Menu_DisableRow(void* menu, uint8_t row);
bool Menu_IsValid(void* menu);
bool Menu_IsDisabled(void* menu);
bool Menu_IsRowDisabled(void* menu, int row);
int Menu_GetColumns(void* menu);
int Menu_GetItems(void* menu, int column);
bool Menu_GetPos(void* menu, float* x, float* y);
bool Menu_GetColumnWidth(void* menu, float* column1Width, float* column2Width);
bool Menu_GetColumnHeader(void* menu, int column, CAPIStringView* header);
bool Menu_GetItem(void* menu, int column, int row, CAPIStringView* item);


// Object functions

void* Object_Create(int modelid, float x, float y, float z, float rotationX, float rotationY, float rotationZ, float drawDistance, int* id);
bool Object_Destroy(void* object);
void* Object_FromID(int objectid);
int Object_GetID(void* object);
bool Object_AttachToVehicle(void* object, void* vehicle, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ);
bool Object_AttachToObject(void* object, void* objAttachedTo, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ, bool syncRotation);
bool Object_AttachToPlayer(void* object, void* player, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ);
bool Object_SetPos(void* object, float x, float y, float z);
bool Object_GetPos(void* object, float* x, float* y, float* z);
bool Object_SetRot(void* object, float rotationX, float rotationY, float rotationZ);
bool Object_GetRot(void* object, float* rotationX, float* rotationY, float* rotationZ);
int Object_GetModel(void* object);
bool Object_SetNoCameraCollision(void* object);
bool Object_IsValid(void* object);
int Object_Move(void* object, float x, float y, float z, float speed, float rotationX, float rotationY, float rotationZ);
bool Object_Stop(void* object);
bool Object_IsMoving(void* object);
bool Object_BeginEditing(void* player, void* object);
bool Object_BeginSelecting(void* player);
bool Object_EndEditing(void* player);
bool Object_SetMaterial(void* object, int materialIndex, int modelId, const char* textureLibrary, const char* textureName, uint32_t materialColor);
bool Object_SetMaterialText(void* object, const char* text, int materialIndex, int materialSize, const char* fontface, int fontsize, bool bold, uint32_t fontColor, uint32_t backgroundColor, int textalignment);
bool Object_SetDefaultCameraCollision(bool disable);
float Object_GetDrawDistance(void* object);
float Object_GetMoveSpeed(void* object);
bool Object_GetMovingTargetPos(void* object, float* targetX, float* targetY, float* targetZ);
bool Object_GetMovingTargetRot(void* object, float* rotationX, float* rotationY, float* rotationZ);
bool Object_GetAttachedData(void* object, int* parentVehicle, int* parentObject, int* parentPlayer);
bool Object_GetAttachedOffset(void* object, float* offsetX, float* offsetY, float* offsetZ, float* rotationX, float* rotationY, float* rotationZ);
bool Object_GetSyncRotation(void* object);
bool Object_IsMaterialSlotUsed(void* object, int materialIndex);
bool Object_GetMaterial(void* object, int materialIndex, int* modelid, CAPIStringView* textureLibrary, CAPIStringView* textureName, int* materialColor);
bool Object_GetMaterialText(void* object, int materialIndex, CAPIStringView* text, int* materialSize, CAPIStringView* fontFace, int* fontSize, bool* bold, int* fontColor, int* backgroundColor, int* textAlignment);
bool Object_IsObjectNoCameraCollision(void* object);
uint8_t Object_GetType(void* player, int objectid);


// PlayerObject functions

void* PlayerObject_Create(void* player, int modelid, float x, float y, float z, float rotationX, float rotationY, float rotationZ, float drawDistance, int* id);
bool PlayerObject_Destroy(void* player, void* object);
void* PlayerObject_FromID(void* player, int objectid);
int PlayerObject_GetID(void* player, void* object);
bool PlayerObject_AttachToVehicle(void* player, void* object, void* vehicle, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ);
bool PlayerObject_AttachToPlayer(void* player, void* object, void* playerAttachedTo, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ);
bool PlayerObject_AttachToObject(void* player, void* object, void* attachedTo, float offsetX, float offsetY, float offsetZ, float rotationX, float rotationY, float rotationZ);
bool PlayerObject_SetPos(void* player, void* object, float x, float y, float z);
bool PlayerObject_GetPos(void* player, void* object, float* x, float* y, float* z);
bool PlayerObject_SetRot(void* player, void* object, float rotationX, float rotationY, float rotationZ);
bool PlayerObject_GetRot(void* player, void* object, float* rotationX, float* rotationY, float* rotationZ);
int PlayerObject_GetModel(void* player, void* object);
bool PlayerObject_SetNoCameraCollision(void* player, void* object);
bool PlayerObject_IsValid(void* player, void* object);
int PlayerObject_Move(void* player, void* object, float x, float y, float z, float speed, float rotationX, float rotationY, float rotationZ);
bool PlayerObject_Stop(void* player, void* object);
bool PlayerObject_IsMoving(void* player, void* object);
bool PlayerObject_BeginEditing(void* player, void* object);
bool PlayerObject_SetMaterial(void* player, void* object, int materialIndex, int modelId, const char* textureLibrary, const char* textureName, uint32_t materialColor);
bool PlayerObject_SetMaterialText(void* player, void* object, const char* text, int materialIndex, int materialSize, const char* fontface, int fontsize, bool bold, uint32_t fontColor, uint32_t backgroundColor, int textalignment);
float PlayerObject_GetDrawDistance(void* player, void* object);
float PlayerObject_GetMoveSpeed(void* player, void* object);
bool PlayerObject_GetMovingTargetPos(void* player, void* object, float* targetX, float* targetY, float* targetZ);
bool PlayerObject_GetMovingTargetRot(void* player, void* object, float* rotationX, float* rotationY, float* rotationZ);
bool PlayerObject_GetAttachedData(void* player, void* object, int* parentVehicle, int* parentObject, int* parentPlayer);
bool PlayerObject_GetAttachedOffset(void* player, void* object, float* offsetX, float* offsetY, float* offsetZ, float* rotationX, float* rotationY, float* rotationZ);
bool PlayerObject_GetSyncRotation(void* player, void* object);
bool PlayerObject_IsMaterialSlotUsed(void* player, void* object, int materialIndex);
bool PlayerObject_GetMaterial(void* player, void* object, int materialIndex, int* modelid, CAPIStringView* textureLibrary, CAPIStringView* textureName, int* materialColor);
bool PlayerObject_GetMaterialText(void* player, void* object, int materialIndex, CAPIStringView* text, int* materialSize, CAPIStringView* fontFace, int* fontSize, bool* bold, int* fontColor, int* backgroundColor, int* textAlignment);
bool PlayerObject_IsNoCameraCollision(void* player, void* object);


// Pickup functions

void* Pickup_Create(int model, int type, float x, float y, float z, int virtualWorld, int* id);
bool Pickup_AddStatic(int model, int type, float x, float y, float z, int virtualWorld);
bool Pickup_Destroy(void* pickup);
void* Pickup_FromID(int pickupid);
int Pickup_GetID(void* pickup);
bool Pickup_IsValid(void* pickup);
bool Pickup_IsStreamedIn(void* player, void* pickup);
bool Pickup_GetPos(void* pickup, float* x, float* y, float* z);
int Pickup_GetModel(void* pickup);
int Pickup_GetType(void* pickup);
int Pickup_GetVirtualWorld(void* pickup);
bool Pickup_SetPos(void* pickup, float x, float y, float z, bool update);
bool Pickup_SetModel(void* pickup, int model, bool update);
bool Pickup_SetType(void* pickup, int type, bool update);
bool Pickup_SetVirtualWorld(void* pickup, int virtualworld);
bool Pickup_ShowForPlayer(void* player, void* pickup);
bool Pickup_HideForPlayer(void* player, void* pickup);
bool Pickup_IsHiddenForPlayer(void* player, void* pickup);


// All functions

bool All_SendClientMessage(uint32_t color, const char* text);
bool All_CreateExplosion(float x, float y, float z, int type, float radius);
bool All_SendDeathMessage(void* killer, void* killee, int weapon);
bool All_EnableStuntBonus(bool enable);


// Recording functions

bool Recording_Start(void* player, int type, const char* file);
bool Recording_Stop(void* player);


// TextDraw functions

void* TextDraw_Create(float x, float y, const char* text, int* id);
bool TextDraw_Destroy(void* textdraw);
void* TextDraw_FromID(int textdrawid);
int TextDraw_GetID(void* textdraw);
bool TextDraw_IsValid(void* textdraw);
bool TextDraw_IsVisibleForPlayer(void* player, void* textdraw);
bool TextDraw_SetLetterSize(void* textdraw, float sizeX, float sizeY);
bool TextDraw_SetTextSize(void* textdraw, float sizeX, float sizeY);
bool TextDraw_SetAlignment(void* textdraw, int alignment);
bool TextDraw_SetColor(void* textdraw, uint32_t color);
bool TextDraw_SetUseBox(void* textdraw, bool use);
bool TextDraw_SetBoxColor(void* textdraw, uint32_t color);
bool TextDraw_SetShadow(void* textdraw, int size);
bool TextDraw_SetOutline(void* textdraw, int size);
bool TextDraw_SetBackgroundColor(void* textdraw, uint32_t color);
bool TextDraw_SetFont(void* textdraw, int font);
bool TextDraw_SetSetProportional(void* textdraw, bool set);
bool TextDraw_SetSelectable(void* textdraw, bool set);
bool TextDraw_ShowForPlayer(void* player, void* textdraw);
bool TextDraw_HideForPlayer(void* player, void* textdraw);
bool TextDraw_ShowForAll(void* textdraw);
bool TextDraw_HideForAll(void* textdraw);
bool TextDraw_SetString(void* textdraw, const char* text);
bool TextDraw_SetPreviewModel(void* textdraw, int model);
bool TextDraw_SetPreviewRot(void* textdraw, float rotationX, float rotationY, float rotationZ, float zoom);
bool TextDraw_SetPreviewVehCol(void* textdraw, int color1, int color2);
bool TextDraw_SetPos(void* textdraw, float x, float y);
bool TextDraw_GetString(void* textdraw, CAPIStringView* text);
bool TextDraw_GetLetterSize(void* textdraw, float* sizeX, float* sizeY);
bool TextDraw_GetTextSize(void* textdraw, float* sizeX, float* sizeY);
bool TextDraw_GetPos(void* textdraw, float* x, float* y);
int TextDraw_GetColor(void* textdraw);
int TextDraw_GetBoxColor(void* textdraw);
int TextDraw_GetBackgroundColor(void* textdraw);
int TextDraw_GetShadow(void* textdraw);
int TextDraw_GetOutline(void* textdraw);
int TextDraw_GetFont(void* textdraw);
bool TextDraw_IsBox(void* textdraw);
bool TextDraw_IsProportional(void* textdraw);
bool TextDraw_IsSelectable(void* textdraw);
int TextDraw_GetAlignment(void* textdraw);
int TextDraw_GetPreviewModel(void* textdraw);
bool TextDraw_GetPreviewRot(void* textdraw, float* x, float* y, float* z, float* zoom);
bool TextDraw_GetPreviewVehColor(void* textdraw, int* color1, int* color2);
bool TextDraw_SetStringForPlayer(void* textdraw, void* player, const char* text);


// PlayerTextDraw functions

void* PlayerTextDraw_Create(void* player, float x, float y, const char* text, int* id);
bool PlayerTextDraw_Destroy(void* player, void* textdraw);
void* PlayerTextDraw_FromID(void* player, int textdrawid);
int PlayerTextDraw_GetID(void* player, void* textdraw);
bool PlayerTextDraw_IsValid(void* player, void* textdraw);
bool PlayerTextDraw_IsVisible(void* player, void* textdraw);
bool PlayerTextDraw_SetLetterSize(void* player, void* textdraw, float x, float y);
bool PlayerTextDraw_SetTextSize(void* player, void* textdraw, float x, float y);
bool PlayerTextDraw_SetAlignment(void* player, void* textdraw, int alignment);
bool PlayerTextDraw_SetColor(void* player, void* textdraw, uint32_t color);
bool PlayerTextDraw_UseBox(void* player, void* textdraw, bool use);
bool PlayerTextDraw_SetBoxColor(void* player, void* textdraw, uint32_t color);
bool PlayerTextDraw_SetShadow(void* player, void* textdraw, int size);
bool PlayerTextDraw_SetOutline(void* player, void* textdraw, int size);
bool PlayerTextDraw_SetBackgroundColor(void* player, void* textdraw, uint32_t color);
bool PlayerTextDraw_SetFont(void* player, void* textdraw, int font);
bool PlayerTextDraw_SetProportional(void* player, void* textdraw, bool set);
bool PlayerTextDraw_SetSelectable(void* player, void* textdraw, bool set);
bool PlayerTextDraw_Show(void* player, void* textdraw);
bool PlayerTextDraw_Hide(void* player, void* textdraw);
bool PlayerTextDraw_SetString(void* player, void* textdraw, const char* text);
bool PlayerTextDraw_SetPreviewModel(void* player, void* textdraw, int model);
bool PlayerTextDraw_SetPreviewRot(void* player, void* textdraw, float rx, float ry, float rz, float zoom);
bool PlayerTextDraw_SetPreviewVehCol(void* player, void* textdraw, int color1, int color2);
bool PlayerTextDraw_SetPos(void* player, void* textdraw, float x, float y);
bool PlayerTextDraw_GetString(void* player, void* textdraw, CAPIStringView* text);
bool PlayerTextDraw_GetLetterSize(void* player, void* textdraw, float* x, float* y);
bool PlayerTextDraw_GetTextSize(void* player, void* textdraw, float* x, float* y);
bool PlayerTextDraw_GetPos(void* player, void* textdraw, float* x, float* y);
int PlayerTextDraw_GetColor(void* player, void* textdraw);
int PlayerTextDraw_GetBoxColor(void* player, void* textdraw);
int PlayerTextDraw_GetBackgroundColor(void* player, void* textdraw);
int PlayerTextDraw_GetShadow(void* player, void* textdraw);
int PlayerTextDraw_GetOutline(void* player, void* textdraw);
int PlayerTextDraw_GetFont(void* player, void* textdraw);
bool PlayerTextDraw_IsBox(void* player, void* textdraw);
bool PlayerTextDraw_IsProportional(void* player, void* textdraw);
bool PlayerTextDraw_IsSelectable(void* player, void* textdraw);
int PlayerTextDraw_GetAlignment(void* player, void* textdraw);
int PlayerTextDraw_GetPreviewModel(void* player, void* textdraw);
bool PlayerTextDraw_GetPreviewRot(void* player, void* textdraw, float* rx, float* ry, float* rz, float* zoom);
bool PlayerTextDraw_GetPreviewVehColor(void* player, void* textdraw, int* color1, int* color2);


// TextLabel functions

void* TextLabel_Create(const char* text, uint32_t color, float x, float y, float z, float drawDistance, int virtualWorld, bool los, int* id);
bool TextLabel_Destroy(void* textlabel);
void* TextLabel_FromID(int textlabelid);
int TextLabel_GetID(void* textlabel);
bool TextLabel_AttachToPlayer(void* textlabel, void* player, float offsetX, float offsetY, float offsetZ);
bool TextLabel_AttachToVehicle(void* textlabel, void* vehicle, float offsetX, float offsetY, float offsetZ);
bool TextLabel_UpdateText(void* textlabel, uint32_t color, const char* text);
bool TextLabel_IsValid(void* textlabel);
bool TextLabel_IsStreamedIn(void* player, void* textlabel);
bool TextLabel_GetText(void* textlabel, CAPIStringView* output);
uint32_t TextLabel_GetColor(void* textlabel);
bool TextLabel_GetPos(void* textlabel, float* x, float* y, float* z);
bool TextLabel_SetDrawDistance(void* textlabel, float distance);
float TextLabel_GetDrawDistance(void* textlabel);
bool TextLabel_GetLOS(void* textlabel);
bool TextLabel_SetLOS(void* textlabel, bool status);
int TextLabel_GetVirtualWorld(void* textlabel);
bool TextLabel_SetVirtualWorld(void* textlabel, int world);
bool TextLabel_GetAttachedData(void* textlabel, int* attached_player, int* attached_vehicle);


// PlayerTextLabel functions

void* PlayerTextLabel_Create(void* player, const char* text, uint32_t color, float x, float y, float z, float drawDistance, void* attachedPlayer, void* attachedVehicle, bool los, int* id);
bool PlayerTextLabel_Destroy(void* player, void* textlabel);
void* PlayerTextLabel_FromID(void* player, int textlabelid);
int PlayerTextLabel_GetID(void* player, void* textlabel);
bool PlayerTextLabel_UpdateText(void* player, void* textlabel, uint32_t color, const char* text);
bool PlayerTextLabel_IsValid(void* player, void* textlabel, bool* valid);
bool PlayerTextLabel_GetText(void* player, void* textlabel, CAPIStringView* output);
bool PlayerTextLabel_GetColor(void* player, void* textlabel, uint32_t* color);
bool PlayerTextLabel_GetPos(void* player, void* textlabel, float* x, float* y, float* z);
bool PlayerTextLabel_SetDrawDistance(void* player, void* textlabel, float distance);
float PlayerTextLabel_GetDrawDistance(void* player, void* textlabel);
bool PlayerTextLabel_GetLOS(void* player, void* textlabel);
bool PlayerTextLabel_SetLOS(void* player, void* textlabel, bool status);
int PlayerTextLabel_GetVirtualWorld(void* player);
bool PlayerTextLabel_GetAttachedData(void* player, void* textlabel, int* attached_player, int* attached_vehicle);


// Vehicle functions

void* Vehicle_Create(int modelid, float x, float y, float z, float rotation, int color1, int color2, int respawnDelay, bool addSiren, int* id);
bool Vehicle_Destroy(void* vehicle);
void* Vehicle_FromID(int vehicleid);
int Vehicle_GetID(void* vehicle);
int Vehicle_GetMaxPassengerSeats(int modelid);
bool Vehicle_IsStreamedIn(void* vehicle, void* player);
bool Vehicle_GetPos(void* vehicle, float* x, float* y, float* z);
bool Vehicle_SetPos(void* vehicle, float x, float y, float z);
float Vehicle_GetZAngle(void* vehicle);
bool Vehicle_GetRotationQuat(void* vehicle, float* w, float* x, float* y, float* z);
float Vehicle_GetDistanceFromPoint(void* vehicle, float x, float y, float z);
bool Vehicle_SetZAngle(void* vehicle, float angle);
bool Vehicle_SetParamsForPlayer(void* vehicle, void* player, int objective, int doors);
bool Vehicle_UseManualEngineAndLights();
bool Vehicle_SetParamsEx(void* vehicle, int engine, int lights, int alarm, int doors, int bonnet, int boot, int objective);
bool Vehicle_GetParamsEx(void* vehicle, int* engine, int* lights, int* alarm, int* doors, int* bonnet, int* boot, int* objective);
int Vehicle_GetParamsSirenState(void* vehicle);
bool Vehicle_SetParamsCarDoors(void* vehicle, int frontLeft, int frontRight, int rearLeft, int rearRight);
bool Vehicle_GetParamsCarDoors(void* vehicle, int* frontLeft, int* frontRight, int* rearLeft, int* rearRight);
bool Vehicle_SetParamsCarWindows(void* vehicle, int frontLeft, int frontRight, int rearLeft, int rearRight);
bool Vehicle_GetParamsCarWindows(void* vehicle, int* frontLeft, int* frontRight, int* rearLeft, int* rearRight);
bool Vehicle_SetToRespawn(void* vehicle);
bool Vehicle_LinkToInterior(void* vehicle, int interiorid);
bool Vehicle_AddComponent(void* vehicle, int componentid);
bool Vehicle_RemoveComponent(void* vehicle, int componentid);
bool Vehicle_ChangeColor(void* vehicle, int color1, int color2);
bool Vehicle_ChangePaintjob(void* vehicle, int paintjobid);
bool Vehicle_SetHealth(void* vehicle, float health);
float Vehicle_GetHealth(void* vehicle);
bool Vehicle_AttachTrailer(void* trailer, void* vehicle);
bool Vehicle_DetachTrailer(void* vehicle);
bool Vehicle_IsTrailerAttached(void* vehicle);
void* Vehicle_GetTrailer(void* vehicle);
bool Vehicle_SetNumberPlate(void* vehicle, const char* numberPlate);
int Vehicle_GetModel(void* vehicle);
int Vehicle_GetComponentInSlot(void* vehicle, int slot);
int Vehicle_GetComponentType(int componentid);
bool Vehicle_CanHaveComponent(int modelid, int componentid);
bool Vehicle_GetRandomColorPair(int modelid, int* color1, int* color2, int* color3, int* color4);
int Vehicle_ColorIndexToColor(int colorIndex, int alpha);
bool Vehicle_Repair(void* vehicle);
bool Vehicle_GetVelocity(void* vehicle, float* x, float* y, float* z);
bool Vehicle_SetVelocity(void* vehicle, float x, float y, float z);
bool Vehicle_SetAngularVelocity(void* vehicle, float x, float y, float z);
bool Vehicle_GetDamageStatus(void* vehicle, int* panels, int* doors, int* lights, int* tires);
bool Vehicle_UpdateDamageStatus(void* vehicle, int panels, int doors, int lights, int tires);
bool Vehicle_GetModelInfo(int vehiclemodel, int infotype, float* x, float* y, float* z);
bool Vehicle_SetVirtualWorld(void* vehicle, int virtualWorld);
int Vehicle_GetVirtualWorld(void* vehicle);
int Vehicle_GetLandingGearState(void* vehicle);
bool Vehicle_IsValid(void* vehicle);
void* Vehicle_AddStatic(int modelid, float x, float y, float z, float angle, int color1, int color2, int* id);
void* Vehicle_AddStaticEx(int modelid, float x, float y, float z, float angle, int color1, int color2, int respawnDelay, bool addSiren, int* id);
bool Vehicle_EnableFriendlyFire();
bool Vehicle_GetSpawnInfo(void* vehicle, float* x, float* y, float* z, float* rotation, int* color1, int* color2);
bool Vehicle_SetSpawnInfo(void* vehicle, int modelid, float x, float y, float z, float rotation, int color1, int color2, int respawn_time, int interior);
int Vehicle_GetModelCount(int modelid);
int Vehicle_GetModelsUsed();
int Vehicle_GetPaintjob(void* vehicle);
bool Vehicle_GetColor(void* vehicle, int* color1, int* color2);
int Vehicle_GetInterior(void* vehicle);
bool Vehicle_GetNumberPlate(void* vehicle, CAPIStringView* numberPlate);
bool Vehicle_SetRespawnDelay(void* vehicle, int respawn_delay);
int Vehicle_GetRespawnDelay(void* vehicle);
void* Vehicle_GetCab(void* vehicle);
void* Vehicle_GetTower(void* vehicle);
int Vehicle_GetOccupiedTick(void* vehicle);
int Vehicle_GetRespawnTick(void* vehicle);
bool Vehicle_HasBeenOccupied(void* vehicle);
bool Vehicle_IsOccupied(void* vehicle);
bool Vehicle_IsDead(void* vehicle);
bool Vehicle_SetParamsSirenState(void* vehicle, bool siren_state);
bool Vehicle_ToggleSirenEnabled(void* vehicle, bool status);
bool Vehicle_IsSirenEnabled(void* vehicle);
void* Vehicle_GetLastDriver(void* vehicle);
void* Vehicle_GetDriver(void* vehicle);
int Vehicle_GetSirenState(void* vehicle);
uint32_t Vehicle_GetHydraReactorAngle(void* vehicle);
float Vehicle_GetTrainSpeed(void* vehicle);
bool Vehicle_GetMatrix(void* vehicle, float* rightX, float* rightY, float* rightZ, float* upX, float* upY, float* upZ, float* atX, float* atY, float* atZ);
void* Vehicle_GetOccupant(void* vehicle, int seat);
int Vehicle_CountOccupants(void* vehicle);


#endif // CWRAPPERS_H
